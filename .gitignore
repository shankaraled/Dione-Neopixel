#include <Adafruit_NeoPixel.h>

int saiaFrente = 4;
int saiaCostas = 5;
int cinto = 6;
int gola = 7;
char caracter;

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)


Adafruit_NeoPixel saiaFrenteStrip = Adafruit_NeoPixel(14, saiaFrente, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel saiaCostasStrip = Adafruit_NeoPixel(13, saiaCostas, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel cintoStrip = Adafruit_NeoPixel(25, cinto, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel golaStrip = Adafruit_NeoPixel(25, gola, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

void setup() {
  saiaFrenteStrip.begin();
  saiaCostasStrip.begin();
  cintoStrip.begin();
  golaStrip.begin();

  saiaFrenteStrip.show();
  saiaCostasStrip.show();
  cintoStrip.show(); // Initialize all pixels to 'off'
  golaStrip.show();

  Serial.begin(9600);  
}

void loop() {
  // Some example procedures showing how to display to the pixels:
  //colorWipe(strip.Color(255, 0, 0), 10); // Red
  //colorWipe(strip.Color(0, 255, 0), 10); // Green
  //colorWipe(strip.Color(0, 0, 255), 10); // Blue
  // Send a theater pixel chase in...
  //theaterChase(strip.Color(127, 127, 127), 50); // White
  //theaterChase(strip.Color(127,   0,   0), 50); // Red
  //theaterChase(strip.Color(  0,   0, 127), 50); // Blue

  //rainbow(30);
  //rainbowCycle(6);
  //theaterChaseRainbow(30);

  //strip.setPixelColor(0, 0, 0, 0);
  //strip.show();

  //colorWipe(cintoStrip.Color(255, 0, 0), 50); // Red
  //colorWipeGola(cintoStrip.Color(255, 0, 0), 50); // Red
  //colorWipeSaia(cintoStrip.Color(255, 0, 0), 50); // Red
  //colorWipe(cintoStrip.Color(0, 255, 0), 50); // Green
  //colorWipeGola(cintoStrip.Color(0, 255, 0), 50); // Green
  //colorWipeSaia(cintoStrip.Color(0, 255, 0), 50); // Green
  //colorWipe(cintoStrip.Color(0, 0, 255), 50); // Blue
  //colorWipeGola(cintoStrip.Color(0, 0, 255), 50); // Blue
  //colorWipeSaia(cintoStrip.Color(0, 0, 255), 50); // Blue

  checkSerial();
}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<cintoStrip.numPixels(); i++) {
    cintoStrip.setPixelColor(i, c);
    cintoStrip.show();
    delay(wait);
  }
}

void colorWipeGola(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<golaStrip.numPixels(); i++) {
    golaStrip.setPixelColor(i, c);
    golaStrip.show();
    delay(wait);
  }
}

void colorWipeSaia(uint32_t c, uint8_t wait) {
  for(uint16_t i=0; i<saiaFrenteStrip.numPixels(); i++) {
    saiaFrenteStrip.setPixelColor(i, c);
    saiaCostasStrip.setPixelColor(i, c);
    saiaFrenteStrip.show();
    saiaCostasStrip.show();
    delay(wait);
  }
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<cintoStrip.numPixels(); i++) {
      saiaFrenteStrip.setPixelColor(i, Wheel((i+j) & 255));
      saiaCostasStrip.setPixelColor(i, Wheel((i+j) & 255));
      cintoStrip.setPixelColor(i, Wheel((i+j) & 255));
      golaStrip.setPixelColor(i, Wheel((i+j) & 255));
    }
    saiaFrenteStrip.show();
    saiaCostasStrip.show();
    cintoStrip.show();
    golaStrip.show();
    delay(wait);
  }
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< cintoStrip.numPixels(); i++) {
      saiaFrenteStrip.setPixelColor(i, Wheel(((i * 256 *1 / saiaFrenteStrip.numPixels()) - j) & 255));
      saiaCostasStrip.setPixelColor(i, Wheel(((i * 256 *1 / saiaCostasStrip.numPixels()) - j) & 255));
      cintoStrip.setPixelColor(i, Wheel(((i * 256 *1 / cintoStrip.numPixels()) - j) & 255));
      golaStrip.setPixelColor(i, Wheel(((i * 256 *1 / golaStrip.numPixels()) - j) & 255));
    }
    saiaFrenteStrip.show();
    saiaCostasStrip.show();
    cintoStrip.show();
    golaStrip.show();
    delay(wait);
  }
}

//Theatre-style crawling lights.
void theaterChase(uint32_t c, uint8_t wait) {
  for (int j=0; j<10; j++) {  //do 10 cycles of chasing
    for (int q=0; q < 3; q++) {
      for (int i=0; i < cintoStrip.numPixels(); i=i+3) {
        cintoStrip.setPixelColor(i+q, c);    //turn every third pixel on
      }
      cintoStrip.show();

      delay(wait);

      for (int i=0; i < cintoStrip.numPixels(); i=i+3) {
        cintoStrip.setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
}

//Theatre-style crawling lights with rainbow effect
void theaterChaseRainbow(uint8_t wait) {
  for (int j=0; j < 256; j++) {     // cycle all 256 colors in the wheel
    for (int q=0; q < 3; q++) {
      for (int i=0; i < cintoStrip.numPixels(); i=i+3) {
        saiaFrenteStrip.setPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel on
        saiaCostasStrip.setPixelColor(i+q, Wheel( (i+j) % 255));
        cintoStrip.setPixelColor(i+q, Wheel( (i+j) % 255));
        golaStrip.setPixelColor(i+q, Wheel( (i+j) % 255));
      }
      saiaFrenteStrip.show();
      saiaCostasStrip.show();
      cintoStrip.show();
      golaStrip.show();

      delay(wait);

      for (int i=0; i < cintoStrip.numPixels(); i=i+3) {
        saiaFrenteStrip.setPixelColor(i+q, 0);        //turn every third pixel off
        saiaCostasStrip.setPixelColor(i+q, 0);
        cintoStrip.setPixelColor(i+q, 0);
        golaStrip.setPixelColor(i+q, 0);
      }
    }
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
    return cintoStrip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } 
  else if(WheelPos < 170) {
    WheelPos -= 85;
    return cintoStrip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } 
  else {
    WheelPos -= 170;
    return cintoStrip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}

int checkSerial () {

  caracter = Serial.read(); 

  if(caracter =='a') { 
    colorWipe(cintoStrip.Color(255, 0, 0), 50); // Red
    colorWipeGola(cintoStrip.Color(255, 0, 0), 50); // Red
    colorWipeSaia(cintoStrip.Color(255, 0, 0), 50); // Red
  }

  if (caracter =='b') {
    colorWipe(cintoStrip.Color(0, 255, 0), 50); // Green
    colorWipeGola(cintoStrip.Color(0, 255, 0), 50); // Green
    colorWipeSaia(cintoStrip.Color(0, 255, 0), 50); // Green
  }

  if (caracter =='c') {
    colorWipe(cintoStrip.Color(0, 0, 255), 50); // Blue
    colorWipeGola(cintoStrip.Color(0, 0, 255), 50); // Blue
    colorWipeSaia(cintoStrip.Color(0, 0, 255), 50); // Blue

  } 

  if (caracter =='d') {
    rainbow(30);
  } 

  if (caracter =='e') {
    rainbowCycle(6);
  } 

  if (caracter =='f') {
    theaterChaseRainbow(70);
  }
}

